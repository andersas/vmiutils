#!/usr/bin/python

# Copyright (C) 2014 by Jonathan G. Underwood.
#
# This file is part of VMIUtils.
#
# VMIUtils is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# VMIUtils is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with VMIUtils.  If not, see <http://www.gnu.org/licenses/>.

import sys
import argparse
import logging
import math
import vmiutils.pbasex as pb

# Set up logging - output all log message to stdout
#logging.basicConfig()
logging.basicConfig(format="%(threadName)s:%(message)s",level=logging.DEBUG)
logger = logging.getLogger('pbmatrix')

# Define functions that will be called by the sub-commands
def calc(args):
    if args.no_oddl is True:
        oddl = False
    else:
        oddl = True

    mtx = pb.PbasexMatrix()
    logger.info('Starting pBasex matrix calculation')
    mtx.calc_matrix_threaded(Rbins=args.Rbins, Thetabins=args.Thetabins,
                             kmax=args.kmax, lmax=args.lmax,
                             sigma=args.sigma, oddl=oddl,
                             epsabs=args.epsabs, epsrel=args.epsrel, wkspsize=args.wkspsize,
                             nthreads=args.nthreads)
    # mtx.calc_matrix(args.Rbins, args.Thetabins, args.kmax, args.lmax, args.sigma,
    #                 oddl, args.epsabs, args.epsrel, args.wkspsize)
    mtx.dump(args.filename)

def info(args):
    try:
        mtx = pb.PbasexMatrix()
        mtx.load(args.filename)
        mtx.print_params()
    except IOError:
        logger.error('File not found')
        sys.exit(1)
    # except:
    #     logger.error('File not a valid matrix file')
    #     sys.exit(1)

parser = argparse.ArgumentParser(
    description='Utility for calculating and manipulating Pbasex matrices')

subparsers = parser.add_subparsers()

# calculate sub-command
parser_calc = subparsers.add_parser('calc',
                                    help='Calculate a Pbasex matrix and store in a file')
parser_calc.set_defaults(func=calc)
parser_calc.add_argument('Rbins', type=int, 
                         help='Number of radial bins in polar image')
parser_calc.add_argument('Thetabins', type=int, 
                         help='Number of angular bins in polar image')
parser_calc.add_argument('kmax', type=int, 
                         help='Maximum index of radial fitting functions')
parser_calc.add_argument('lmax', type=int,
                         help='Maximum order of Legendre polynomial in fitting functions')
parser_calc.add_argument('filename', 
                         help='Name of file to store matrix')
parser_calc.add_argument('--no-oddl', action='store_true', 
                         help='Specify whether to include odd order Legendre Polynomials')
parser_calc.add_argument('--sigma', type=float, default=None,
                         help='The value of sigma in the radial functions')
parser_calc.add_argument('--epsabs', type=float, default=0.0,
                         help='Absolute integration tolerance for numerical integration')
parser_calc.add_argument('--epsrel', type=float, default=1.0e-7,
                         help='Relative integration tolerance for numerical integration')
parser_calc.add_argument('--wkspsize', type=int, default=100000,
                         help='Maximum number of divisions in numerical integration')
parser_calc.add_argument('--nthreads', type=int, default=None,
                         help='Number of threads to use')

# info sub-command
parser_info = subparsers.add_parser('info', 
                                    help='Extract parameters from a Pbasex matrix file')
parser_info.set_defaults(func=info)
parser_info.add_argument('filename',
                         help='Pbasex matrix file to query parameters from')

args = parser.parse_args()
args.func(args)


