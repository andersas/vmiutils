#!/usr/bin/python

import vmiutils.pbasex as pb
import argparse

parser = argparse.ArgumentParser(
    description='Calculate a PBasex inversion matrix and save to a file')

parser.add_argument('Rbins', type=int, 
                    help='Number of radial bins in polar image')
parser.add_argument('Thetabins', type=int, 
                    help='Number of angular bins in polar image')
parser.add_argument('kmax', type=int, 
                    help='Maximum index of radial fitting functions')
parser.add_argument('lmax', type=int,
                    help='Maximum order of Legendre polynomial in fitting functions')
parser.add_argument('filename', 
                    help='Name of file to store matrix')
parser.add_argument('--no-oddl', action='store_true', 
                    help='Specify whether to include odd order Legendre Polynomials')
parser.add_argument('--sigma', type=float, default=None,
                    help='The value of sigma in the radial functions')
parser.add_argument('--epsabs', type=float, default=0.0,
                    help='Absolute integration tolerance for numerical integration')
parser.add_argument('--epsrel', type=float, default=1.0e-7,
                    help='Relative integration tolerance for numerical integration')
parser.add_argument('--tol', type=float, default=1.0e-7,
                    help='Maximum acceptable relative error returned from numerical integration')
parser.add_argument('--wkspsize', type=int, default=100000,
                    help='Maximum number of divisions in numerical integration')

args = parser.parse_args()

if args.no_oddl == True:
    oddl = False
else:
    oddl=True

mtx = pb.PbasexMatrix()
mtx.calc_matrix(args.Rbins, args.Thetabins, args.kmax, args.lmax, args.sigma,
                oddl, args.epsabs, args.epsrel, args.tol, args.wkspsize)
mtx.dump(args.filename)



