#!/usr/bin/python
import sys
import argparse
import logging
import math
import vmiutils.pbasex as pb

# Set up logging - output all log message to stdout
#logging.basicConfig()
logging.basicConfig(format="%(threadName)s:%(message)s",level=logging.DEBUG)
logger = logging.getLogger('pbmatrix')

# Define functions that will be called by the sub-commands
def calc(args):
    if args.no_oddl is True:
        oddl = False
    else:
        oddl = True
    # Detection function
    if args.detectfn is not None:
        detectfn = pb.PbasexFit()
        logger.info ('loading detector function file: {0}'.format(args.detectfn))
        try:
            detectfn.load(args.detectfn)
        except IOError:
            logger.error('could not read file: {0}'.format(args.detectfn))

        if args.alpha is None:
            alpha = 0.0;
        else:
            alpha = math.radians(args.alpha)

        if args.beta is None:
            beta = 0.0;
        else:
            beta = math.radians(args.alpha)

    mtx = pb.PbasexMatrix()
    logger.info('Starting pBasex matrix calculation')
    mtx.calc_matrix_threaded(Rbins=args.Rbins, Thetabins=args.Thetabins, kmax=args.kmax, lmax=args.lmax,
                             sigma=args.sigma, oddl=oddl,
                             epsabs=args.epsabs, epsrel=args.epsrel, wkspsize=args.wkspsize,
                             detectionfn=detectfn, alpha=alpha, beta=beta,
                             nthreads=args.nthreads)
    # mtx.calc_matrix(args.Rbins, args.Thetabins, args.kmax, args.lmax, args.sigma,
    #                 oddl, args.epsabs, args.epsrel, args.wkspsize)
    mtx.dump(args.filename)

def info(args):
    try:
        mtx = pb.PbasexMatrix()
        mtx.load(args.filename)
        mtx.print_params()
    except IOError:
        logger.error('File not found')
        sys.exit(1)
    # except:
    #     logger.error('File not a valid matrix file')
    #     sys.exit(1)

parser = argparse.ArgumentParser(
    description='Utility for calculating and manipulating Pbasex matrices')

subparsers = parser.add_subparsers()

# calculate sub-command
parser_calc = subparsers.add_parser('calc',
                                    help='Calculate a Pbasex matrix and store in a file')
parser_calc.set_defaults(func=calc)
parser_calc.add_argument('Rbins', type=int, 
                    help='Number of radial bins in polar image')
parser_calc.add_argument('Thetabins', type=int, 
                    help='Number of angular bins in polar image')
parser_calc.add_argument('kmax', type=int, 
                    help='Maximum index of radial fitting functions')
parser_calc.add_argument('lmax', type=int,
                    help='Maximum order of Legendre polynomial in fitting functions')
parser_calc.add_argument('filename', 
                    help='Name of file to store matrix')
parser_calc.add_argument('--no-oddl', action='store_true', 
                    help='Specify whether to include odd order Legendre Polynomials')
parser_calc.add_argument('--sigma', type=float, default=None,
                    help='The value of sigma in the radial functions')
parser_calc.add_argument('--epsabs', type=float, default=0.0,
                    help='Absolute integration tolerance for numerical integration')
parser_calc.add_argument('--epsrel', type=float, default=1.0e-7,
                    help='Relative integration tolerance for numerical integration')
parser_calc.add_argument('--wkspsize', type=int, default=100000,
                    help='Maximum number of divisions in numerical integration')
parser_calc.add_argument('--nthreads', type=int, default=None,
                    help='Number of threads to use')
parser_calc.add_argument('--detectfn', default=None,
                    help='Name of file containing a detection function')
parser_calc.add_argument('--alpha', default=None,
                    help='Azimuthal angle between the detector frame and lab frame (degrees)')
parser_calc.add_argument('--beta', default=None,
                    help='Polar angle between the detector frame and lab frame (degrees)')

# info sub-command
parser_info = subparsers.add_parser('info', 
                                    help='Extract parameters from a Pbasex matrix file')
parser_info.set_defaults(func=info)
parser_info.add_argument('filename',
                         help='Pbasex matrix file to query parameters from')

args = parser.parse_args()
args.func(args)


