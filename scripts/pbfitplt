#!/usr/bin/python

import argparse
import logging
import numpy
import vmiutils as vmi
import vmiutils.pbasex as pb
import matplotlib
matplotlib.use('PDF')
import matplotlib.pyplot as plot

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('pbfit')

parser = argparse.ArgumentParser(
    description='Utility for generating plots from a PBASEX fit file and a VMI data file')

parser.add_argument('fit_file', help='Name of file containing PBASEX fit')

parser.add_argument('vmi_file', help='Name of file containing original VMI data')

parser.add_argument('--swapxy', action='store_true',
                    help='If specified, the VMI image data will have the axes swapped before plotting')
parser.add_argument('--filetype', default='matrix',
                    choices=['matrix', 'threecolumn'],
                    help='Specifies the type of VMI data file')
parser.add_argument('--centre', nargs=2, type=float, default=None,
                    help='The x and y coordinates of the VMI image centre (before swapping axes, if requested)')
parser.add_argument('--delimiter', default=None,
                    help='Specifies the delimiter used (defaults to whitespace)')

args = parser.parse_args()

if args.filetype == 'matrix':
    logger.debug('loading VMI matrix file: {0}'.format(args.vmi_file))
    try:
        if args.delimiter is not None:
            img = numpy.loadtxt(args.vmi_file, delimiter = args.delimiter)
        else:
            img = numpy.loadtxt(args.vmi_file)
        x = None
        y = None
    except IOError:
        logger.error('could not read file: {0}'.format(vmi_file))
        sys.exit(74)
elif args.filetype == 'threecolumn':
    import vmiutils.threecolumns
    try:
        x, y, img = vmiutils.threecolumns.threecolumns_read(args.vmi_file)
    except IOError:
        logger.error('could not read file: {0}'.format(vmi_file))
        sys.exit(74)
else:
    raise NotImplementedError

# Wrap VMI data into instance of CartesianImage
if args.swapxy is True:
    img = img.transpose()
    if x is not None and y is not None:
        newx = y
        newy = x
        x = newx
        y = newy
    if args.centre is not None:
        centre = (args.centre[1], args.centre[0])
    else:
        centre = None
else:
    if args.centre is not None:
        centre = (args.centre[0], args.centre[1])
    else:
        centre = None

vmicart = vmi.CartesianImage(image=img, x=x, y=y)

# Set centre
if centre is not None:
    vmicart.set_centre(centre)

logger.debug('image loaded and converted to cartesian image')

fit = pb.PbasexFit()
fit.load(args.fit_file)
logger.debug('fit data loaded')

r1, spec = fit.calc_radial_spectrum()
logger.debug('radial spectrum calculated')

r2, beta = fit.beta_coefficients()
logger.debug('beta coefficients calculated')

invimg_cart = fit.cartesian_distribution(bins=100)
logger.debug('cartesian distribution calculated')

vmicart_zoom = vmicart.zoom_circle(fit.rmax)
logger.debug('zoom of original image calculated')

# Generate plots in a multi page PDF file
from matplotlib.backends.backend_pdf import PdfPages
 
pdf_pages = PdfPages(args.vmi_file + '.pdf')

# First page contains plots of the image data and the reconstructed
# distribution. Plot with two different coloour maps.
fig = plot.figure(figsize=(8.27, 11.69), dpi=100)

ax = plot.subplot2grid((2, 2), (0, 0))
im = plot.imshow(vmicart_zoom.image.transpose(), origin='lower',
                extent=(vmicart_zoom.x[0], vmicart_zoom.x[-1],
                        vmicart_zoom.y[0], vmicart_zoom.y[-1]),
                cmap=plot.cm.gist_heat)
ax.set_title('Experimental data')
fig.colorbar(im, use_gridspec=True, shrink=0.6)

ax = plot.subplot2grid((2, 2), (0, 1))
im = plot.imshow(invimg_cart.image.transpose().clip(0.0), origin='lower', 
                extent=(invimg_cart.x[0], invimg_cart.x[-1],
                        invimg_cart.y[0], invimg_cart.y[-1]),
                cmap=plot.cm.gist_heat)
ax.set_title('pBasex reconstruction')
fig.colorbar(im, use_gridspec=True, shrink=0.6)

ax = plot.subplot2grid((2, 2), (1, 0))
im = plot.imshow(vmicart_zoom.image.transpose(), origin='lower',
                extent=(vmicart_zoom.x[0], vmicart_zoom.x[-1],
                        vmicart_zoom.y[0], vmicart_zoom.y[-1]),
                 cmap=plot.cm.spectral)
ax.set_title('Experimental data')
fig.colorbar(im, use_gridspec=True, shrink=0.6)

ax = plot.subplot2grid((2, 2), (1, 1))
im = plot.imshow(invimg_cart.image.transpose().clip(0.0), origin='lower', 
                extent=(invimg_cart.x[0], invimg_cart.x[-1],
                        invimg_cart.y[0], invimg_cart.y[-1]),
                 cmap=plot.cm.spectral)
ax.set_title('pBasex reconstruction')
fig.colorbar(im, use_gridspec=True, shrink=0.6)

pdf_pages.savefig(fig)

# Second page containing the radial spectrum and beta parameters. We
# potentially need a big area for the beta value plot legend, so we
# let this plot be twice as large as the radial spectrum.
fig = plot.figure(figsize=(8.27, 11.69), dpi=100)

# radial spectrum
ax1 = plot.subplot2grid((3, 1), (0, 0), colspan=2, rowspan=1)
ax1.plot(r1, spec)

# beta parameters
ax1 = plot.subplot2grid((3, 1), (1, 0), colspan=2, rowspan=2)

ax1.plot(r1, spec, ':')
ax2 = ax1.twinx()
ax2.set_autoscaley_on(False)
ax2.set_ybound(-5, 5)

if fit.oddl == True:
    inc = 1
    bstart = 1
else:
    inc = 2
    bstart = 2

for b in numpy.arange(bstart, beta.shape[0], inc):
    ax2.plot(r2, beta[b, :], label=r"$\beta_{%d}$"%b)

box = ax1.get_position()
ax1.set_position([box.x0,box.y0,box.width,0.5*box.height])
ax2.set_position([box.x0,box.y0,box.width,0.5*box.height])


plot.legend(bbox_to_anchor=(0., 1.02, 1., .102), loc=3,
            ncol=8, mode="expand", borderaxespad=0.)

pdf_pages.savefig(fig)

# Close PDF file
pdf_pages.close()

