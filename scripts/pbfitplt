#!/usr/bin/python

# Copyright (C) 2014 by Jonathan G. Underwood.
#
# This file is part of VMIUtils.
#
# VMIUtils is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# VMIUtils is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with VMIUtils.  If not, see <http://www.gnu.org/licenses/>.

import math
import argparse
import logging
import numpy
import vmiutils as vmi
import vmiutils.pbasex as pb
import vmiutils.pbasex.detfn1 as pbdetfn1
import matplotlib
matplotlib.use('PDF')
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.pyplot as plot

logging.basicConfig(format="%(threadName)s:%(message)s", level=logging.DEBUG)
logger = logging.getLogger('pbfit')

parser = argparse.ArgumentParser(
    description='Utility for generating plots from a PBASEX fit file')

parser.add_argument('fit_file', help='Name of file containing PBASEX fit')

parser.add_argument(
    'output_file', help='Name of file (PDF) to which the plots are to be saved')

parser.add_argument(
    '--type', help='Type of fit file. Currently supported are "normal" (default) and "detfn1"', default='normal')

args = parser.parse_args()

if args.type == 'normal':
    fit = pb.PbasexFit()
elif args.type == 'detfn1':
    fit = pbdetfn1.PbasexFitDetFn1()
else:
    raise NotImplementedError

fit.load(args.fit_file)
logger.debug('fit data loaded')

vmi_im = pb.PbasexFitVMI(fit)
logger.debug('VMI established')

cart_im = pb.PbasexFitCartesianImage(fit)
logger.debug('cartesian distribution calculated')

radial_spec = pb.PbasexFitRadialSpectrum(fit)
logger.debug('radial spectrum calculated')

beta_spec = pb.PbasexFitBetaSpectrum(fit)
logger.debug('beta coefficients calculated')

cosn_spec = pb.PbasexFitCosnSpectrum(fit)
logger.debug('cos^n(theta) expectation values calculated')

# Generate plots in a multi page PDF file
pdf_pages = PdfPages(args.output_file)

# Use a serif font by default
matplotlib.rcParams.update({'font.family': 'serif'})

# First page contains plots of the image data and the reconstructed
# distribution. Plot with two different coloour maps.
fig = plot.figure(figsize=(8.27, 11.69), dpi=100)
fig.set_tight_layout(True)


# import scipy.ndimage
# invimg_cart.image = scipy.ndimage.median_filter(invimg_cart.image, size=3).clip(0.0)

# cx = invimg_cart.centre_pixel[0]
# cy = invimg_cart.centre_pixel[1]
# invimg_cart.image[cx-5:cx+5,cy-5:cy+5]=0.0

# TODO: move colorbar stuff to respective functions
from mpl_toolkits.axes_grid1 import make_axes_locatable

ax = plot.subplot2grid((2, 2), (0, 0), aspect=1.0)
im = vmi_im.plot(axis=ax, cmap=plot.cm.gist_heat)
ax.axis('image')
ax.set_title('Experimental data')
divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.05)
plot.colorbar(im, cax=cax)

logger.debug('1/4 images done')

ax = plot.subplot2grid((2, 2), (0, 1), aspect=1.0)
im = cart_im.plot(axis=ax, cmap=plot.cm.gist_heat)
ax.axis('image')
ax.set_title('pBasex reconstruction')
divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.05)
plot.colorbar(im, cax=cax)

logger.debug('2/4 images done')

ax = plot.subplot2grid((2, 2), (1, 0), aspect=1.0)
im = vmi_im.plot(axis=ax)
ax.axis('image')
ax.set_title('Experimental data')
divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.05)
plot.colorbar(im, cax=cax)

logger.debug('3/4 images done')

ax = plot.subplot2grid((2, 2), (1, 1), aspect=1.0)
im = cart_im.plot(axis=ax)
ax.axis('image')
ax.set_title('pBasex reconstruction')
divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.05)
plot.colorbar(im, cax=cax)

logger.debug('4/4 images done')

pdf_pages.savefig(fig)
plot.close(fig)

logger.debug('images plotted')

# Second page containing the radial spectrum.
fig = plot.figure(figsize=(8.27, 11.69 / 2), dpi=100)
ax=plot.axes()
radial_spec.plot(axis=ax)
ax.set_title('Radial spectrum')
pdf_pages.savefig(fig)
plot.close(fig)
logger.debug('radial spectrum plotted')

# Plot beta parameters over a dashed radial spectrum - one plot per
# beta parameter.
if fit.oddl == True:
    inc = 1
    lvals = range(fit.lmax + 1)
    nplots = fit.lmax
else:
    inc = 2
    lvals = range(0, fit.lmax + 1, 2)
    nplots = fit.lmax / 2

plots_per_page = 3
pages_reqd = int(math.ceil(float(nplots) / plots_per_page))

this_beta = 0
for page in xrange(pages_reqd):
    fig = plot.figure(figsize=(8.27, 11.69), dpi=100)
    fig.set_tight_layout(True)

    for this_plot in xrange(plots_per_page):
        this_beta = this_beta + inc

        if this_beta > fit.lmax:
            break

        ax1 = plot.subplot2grid((plots_per_page, 1), (this_plot, 0))
        beta_spec.plot(axis=ax1, betavals=[this_beta])

        ax2 = ax1.twinx()
        radial_spec.plot(axis=ax2, linestyle='--')

    pdf_pages.savefig(fig)
    plot.close(fig)

logger.debug('beta values plotted')

# <cos^n(theta)> expectation values. Here we plot up to
# <cos^lmax(theta)>, which is rather arbitrary - unlike the beta
# values, the cos^l are not orthogonal, and so we don't expect values
# with l>lmax to be zero.
this_n = 0
for page in xrange(pages_reqd):
    fig = plot.figure(figsize=(8.27, 11.69), dpi=100)
    fig.set_tight_layout(True)

    for this_plot in xrange(plots_per_page):
        this_n = this_n + inc

        if this_n > fit.lmax:
            break

        ax1 = plot.subplot2grid((plots_per_page, 1), (this_plot, 0))
        cosn_spec.plot(axis=ax1, nvals=[this_n])

        ax2 = ax1.twinx()
        radial_spec.plot(axis=ax2, linestyle='--')

        ax2.set_title(
            r'Radial dependence of $\langle\cos^{%d}\theta\rangle$' % this_n)
        # plot.legend()

    pdf_pages.savefig(fig)
    plot.close(fig)

logger.debug('<cos^n(theta)> plotted')

if args.type == 'detfn1':
    overlap = pbdetfn1.PbasexFitDetFn1OverlapSpectrum(fit)
    logger.debug('overlap spectrum calculated')
    probespec = pbdetfn1.PbasexFitDetFn1ProbeRadialSpectrum(fit)
    logger.debug('probe spectrum calculated')
    fig = plot.figure(figsize=(8.27, 11.69 / 2), dpi=100)
    ax1 = plot.axes()
    overlap.plot(axis=ax1)#, scale_min=0.0, scale_max=1.0)
    ax2 = ax1.twinx()
    probespec.plot(axis=ax2, linestyle='--')
    ax1.set_title('Angular overlap factor')
    pdf_pages.savefig(fig)
    plot.close(fig)
    logger.debug('overlap factor and probe radial spectrum plotted')


# Close PDF file
pdf_pages.close()
