#!/usr/bin/python

import argparse
import logging
import numpy
import vmiutils as vmi
import vmiutils.pbasex as pb

logging.basicConfig()
logger = logging.getLogger('pbfit')

parser = argparse.ArgumentParser(
    description='Utility for inverting a VMI image using a PBASEX matrix')

parser.add_argument('vmi_file', help='Name of file containing VMI image')
parser.add_argument('matrix_file', help='Name of file containing PBASEX matrix')

args = parser.parse_args()

mtx = pb.PbasexMatrix()
mtx.load(args.matrix_file)
logger.debug("matrix loaded")

vmicart = vmi.CartesianImage()
vmicart.from_numpy_array(numpy.loadtxt(args.vmi_file))
logger.debug("image loaded and converted to cartesian image")

centre = vmicart.centre_of_gravity()
vmicart.set_centre(centre)
logger.info('image centre: {0}'.format(centre))

vmipolar = vmi.PolarImage()
vmipolar.from_CartesianImage(vmicart, Rbins=mtx.Rbins, Thetabins=mtx.Thetabins)
logger.debug('image converted to polar coordinates')

fit = pb.PbasexFit()
fit.fit_data(vmipolar, mtx)
logger.debug('data fit')

# r, i = fit.calc_radial_spectrum(750)
# import pylab
# pylab.figure()
# pylab.plot(r, i)
# pylab.show()

# r, theta, dist = fit.calc_distribution()
# p = vmi.PolarImage()
# p.from_numpy_array(dist)
# c = vmi.CartesianImage()
# c.from_PolarImage(p)
# print 'plotting'
# import pylab
# f=pylab.figure()
# p=pylab.imshow(c.image, cmap=pylab.cm.gist_gray)
# f.colorbar(p)
# pylab.show()

x, y, dist = fit.cartesian_distribution()
print 'plotting'
import pylab
f=pylab.figure()
p=pylab.imshow(dist, cmap=pylab.cm.gist_gray)
f.colorbar(p)
pylab.show()

