#!/usr/bin/python

import argparse
import logging
import numpy
import vmiutils as vmi
import vmiutils.pbasex as pb

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger('pbfit')

parser = argparse.ArgumentParser(
    description='Utility for inverting a VMI image using a PBASEX matrix')

parser.add_argument('vmi_file', help='Name of file containing VMI image')
parser.add_argument('matrix_file', help='Name of file containing PBASEX matrix')
parser.add_argument('--no-oddl', action='store_true', 
                    help='Specify whether to include odd order Legendre Polynomials')
parser.add_argument('--centre', nargs=2, type=float, default=None,
                    help='The x and y coordinates of the image centre (after transposing, if requested)')
parser.add_argument('--transpose', action='store_true',
                    help='The value of sigma in the radial functions')

args = parser.parse_args()

if args.no_oddl is True:
    oddl = False
else:
    oddl = True
        
mtx = pb.PbasexMatrix()
mtx.load(args.matrix_file)
logger.debug("matrix loaded")

vmicart = vmi.CartesianImage()
vmicart.from_numpy_array(numpy.loadtxt(args.vmi_file))
logger.debug("image loaded and converted to cartesian image")

if args.transpose is True:
    vmicart.transpose()

if args.centre is None:
    centre = vmicart.centre_of_gravity()
    logger.info('image centre of gravity used as centre: {0}'.format(centre))
else:
    centre = args.centre

vmicart.set_centre(centre)
logger.debug('image centre: {0}'.format(centre))

vmipolar = vmi.PolarImage()
vmipolar.from_CartesianImage(vmicart, rbins=mtx.Rbins, thetabins=mtx.Thetabins)
logger.debug('image converted to polar coordinates')

fit = pb.PbasexFit()
fit.fit_data(vmipolar, mtx, oddl=oddl)
logger.debug('data fit')

r1, spec = fit.calc_radial_spectrum()
logger.debug('radial spectrum calculated')

r2, beta = fit.beta_coefficients()
logger.debug('beta coefficients calculated')

x, y, dist = fit.cartesian_distribution()
logger.debug('cartesian distribution calculated')

vmicart_zoom = vmicart.zoom_circle(vmipolar.r[-1])
logger.debug('zoom of original image calculated')


#import matplotlib
#matplotlib.rcParams['legend.fancybox'] = True
import pylab

fig = pylab.figure()
#pylab.subplot(2, 1, 1)

#axis_l = fig.add_subplot(211)
#axis_l.plot(r1, spec)
ax1 = pylab.axes([0.1, 0.1, 0.8, 0.35])
ax1.plot(r1, spec)

# axis_r = axis_l.twinx()
# pylab.ylim(-5, 5)
# for b in xrange(beta.shape[0]):
#     axis_r.plot(r2, beta[b, :], label='beta'+format(b))
# pylab.legend()

ax2 = ax1.twinx()
ax2.set_autoscaley_on(False)
ax2.set_ybound(-5, 5)
for b in xrange(1, beta.shape[0]):
    ax2.plot(r2, beta[b, :], label=r"$\beta_{%d}$"%b)
pylab.legend()

# pylab.subplot(2, 1, 2)
# distplot = pylab.imshow(dist.transpose().clip(0.0), origin='lower', cmap=pylab.cm.gist_heat)
# fig.colorbar(distplot)
# pylab.show()

ax3 = pylab.axes([0.1, 0.55, 0.35, 0.35])
epl = ax3.imshow(vmicart_zoom.image.transpose(), origin='lower', 
                 cmap=pylab.cm.gist_heat)

fig.colorbar(epl)

ax4 = pylab.axes([0.55, 0.55, 0.35, 0.35])
dpl = ax4.imshow(dist.transpose().clip(0.0), origin='lower', 
           cmap=pylab.cm.gist_heat)
fig.colorbar(dpl)

pylab.show()
