#!/usr/bin/python

import argparse
import logging
import numpy
import vmiutils as vmi
import vmiutils.pbasex as pb

logging.basicConfig()
logger = logging.getLogger('pbfit')

parser = argparse.ArgumentParser(
    description='Utility for inverting a VMI image using a PBASEX matrix')

parser.add_argument('vmi_file', help='Name of file containing VMI image')
parser.add_argument('matrix_file', help='Name of file containing PBASEX matrix')
parser.add_argument('--no-oddl', action='store_true', 
                    help='Specify whether to include odd order Legendre Polynomials')
parser.add_argument('--centre', nargs=2, type=float, default=None,
                    help='The x and y coordinates of the image centre (after transposing, if requested)')
parser.add_argument('--transpose', action='store_true',
                    help='The value of sigma in the radial functions')

args = parser.parse_args()

if args.no_oddl is True:
    oddl = False
else:
    oddl = True
        
mtx = pb.PbasexMatrix()
mtx.load(args.matrix_file)
logger.debug("matrix loaded")

vmicart = vmi.CartesianImage()
vmicart.from_numpy_array(numpy.loadtxt(args.vmi_file))
logger.debug("image loaded and converted to cartesian image")

if args.transpose is True:
    vmicart.transpose()

if args.centre is None:
    centre = vmicart.centre_of_gravity()
else:
    centre = args.centre

vmicart.set_centre(centre)
logger.info('image centre: {0}'.format(centre))

vmipolar = vmi.PolarImage()
vmipolar.from_CartesianImage(vmicart, Rbins=mtx.Rbins, Thetabins=mtx.Thetabins)
logger.debug('image converted to polar coordinates')

fit = pb.PbasexFit()
fit.fit_data(vmipolar, mtx, oddl=oddl)
logger.debug('data fit')

r, i = fit.calc_radial_spectrum()

import pylab
fig = pylab.figure()
axl = fig.add_subplot(111)
axl.plot(r, i)

r, beta = fit.beta_coefficients()
#print beta.shape, r.shape, beta[0, :].shape
axr = axl.twinx()
axr.plot(r, beta[0, :])
axr.plot(r, beta[1, :])
axr.plot(r, beta[2, :])
pylab.show()

# r, theta, dist = fit.calc_distribution()
# p = vmi.PolarImage()
# p.from_numpy_array(dist)
# c = vmi.CartesianImage()
# c.from_PolarImage(p)
# print 'plotting'
# import pylab
# f=pylab.figure()
# p=pylab.imshow(c.image, cmap=pylab.cm.gist_gray)
# f.colorbar(p)
# pylab.show()

x, y, dist = fit.cartesian_distribution()
#import pylab
f=pylab.figure()
p=pylab.imshow(dist.clip(0.0), origin='lower', vmax=0.15, cmap=pylab.cm.gist_heat)
f.colorbar(p)
pylab.show()

