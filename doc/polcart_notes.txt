
Notes on conversion between cartesian and polar images.

1. We use scipy.ndimage.geometric_transform for this, although we
   could alternatively use map_coordinates. Alternatively we could
   also have chosen to hand roll things using scipy.interpolate
   bivariate interpolation routines.

2. geomtric_transform - this works by passing tuples to the mapping
   function. These tuples correspond to the indices of the output
   array. The mapping function needs to return the corresponding
   (fractional) indices in the input array. geometric_transform then
   finds the value at those returned indices in the input array by
   interpolation.

3. When geometric_transform does this last interpolation step, it
   assumes that the pixel values in the input array correspond to the
   data values at the pixel indices (rather than the centre of the
   pixel).

4. Relatedly, matplotlib has two different functions for plotting
   image data, imshow and pcolor(mesh), which work slightly
   differently. imshow assumes the image indices correspond to the
   pixel centres. pcolor on the other hand assumes the image indices
   specify the lower left coordinates of the pixel. This is why (when
   not using a polar projection) pcolormesh requires the x and y
   arrays to have one extra value than the corresponding image data
   dimension (see pcolor documentation).

5. There are two different approaches to the conversion between
   cartesian and polar images, depending on whether we regard the
   indices as corresponding to the pixel centre, or lower left
   corner. The way geometric_transform interpolates (see point 3
   above) is consistent with pcolor i.e. assumes pixel indices
   correspond to the lower left corner. If we instead wnat to regard
   pixel indices as specifying pixel centres then we need to take that
   into account in the mapping functions we pass to
   geometric_transform by adding half a pixel width as appropriate.

   a) in polcart.py we treat the data as gridded data points
      corresponding to the lower left corners of pixels when plotting.

   b) in polcart2.py we treat the data as binned data and so take into
      account that we need to calculate the output values at the
      output pixel centre, and find the input data value at the
      corresponding pixel centre.
